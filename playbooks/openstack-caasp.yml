---
- hosts: localhost
  gather_facts: no
  connection: local
  roles:
    - ansible-config_template
  post_tasks:
    - name: Load generic vars
      include_vars: "{{ playbook_dir }}/../vars/common-vars.yml"
    - name: Load openstack vars
      include_vars: "{{ playbook_dir }}/../vars/deploy-on-openstack.yml"

    - name: Create stackname if not exists.
      shell: "echo {{ deploy_on_openstack_prefix }}-{{ lookup('env', 'BUILD_NUMBER') | default(250 | random, true) }} | tee {{ deploy_on_openstack_caasp_stacknamefile }}"
      register: _stack
      args:
        chdir: "{{ deploy_on_openstack_caasp_stacknamefile | dirname }}"
        creates: "{{ deploy_on_openstack_caasp_stacknamefile }}"

    - name: Handle creation if not exists
      when:
        - not ((caasp_stack_delete | default('false'))| bool)
        - _stack is changed
      block:
        - name: Create stack
          register: stackdetails
          os_stack:
            cloud: "{{ deploy_on_openstack_cloudname }}"
            state: "present"
            name: "{{ _stack.stdout }}"
            template: "{{ playbook_dir }}/../files/caasp-stack.yaml"
            parameters:
              image: "{{ deploy_on_openstack_caasp_image }}"
              external_net: "{{ deploy_on_openstack_external_network }}"
              internal_network: "{{ deploy_on_openstack_internal_network }}"
              internal_subnet: "{{ deploy_on_openstack_internal_subnet }}"
              security_group: "{{ deploy_on_openstack_caasp_securitygroup }}"
              keypair: "{{ deploy_on_openstack_keypairname }}"
              worker_count: "{{ deploy_on_openstack_caasp_workers }}"

        # TODO(evrardjp) Remove this when all the nodes have floating IPs in the template
        - name: Get all the node with no floating ips
          command: openstack server list --name {{ _stack.stdout | quote }}-worker -c ID -f json --noindent
          changed_when: false
          register: _workernodeswithnofloating
        # Do not reuse to prevent ssh issues or race conditions when running
        # multiple of those jobs at the same time.
        - name: Get a floating ip for the machines
          loop: "{{ _workernodeswithnofloating | from_json }}"
          os_floating_ip:
            cloud: "{{ deploy_on_openstack_cloudname }}"
            server: "{{ item.ID }}"
            reuse: no
            network: "{{ deploy_on_openstack_external_network }}"

        # TODO(evrardjp): Replace this with stack output
        - name: Get workers details
          command: openstack server list --name {{ _stack.stdout }}-worker -c ID -c Name -c Networks -f json --noindent
          register: _workermachines
          changed_when: false
        - name: Get admin details
          command: openstack server list --name {{ _stack.stdout }}-admin -c ID -c Name -c Networks -f json --noindent
          register: _adminmachines
          changed_when: false
        - name: Get master details
          command: openstack server list --name {{ _stack.stdout }}-master -c ID -c Name -c Networks -f json --noindent
          register: _mastermachines
          changed_when: false
        - name: Set the list of IDs per type of machine.
          set_fact:
            workers: "{{ _workermachines.stdout | from_json }}"
            admins: "{{ _adminmachines.stdout | from_json }}"
            masters: "{{ _mastermachines.stdout | from_json }}"

        # TODO(evrardjp): Replace with stack output
        - name: Create inventory hosts structures
          set_fact:
            workerinventory: "{ {% for node in workers %}\"{{ node.Name }}\": { \"ansible_host\":\"{{ node.Networks.split(',')[-1].replace(' ','') }}\" }{% if not loop.last %},{% endif %}{% endfor %} }"
            admininventory: "{ {% for node in admins %}\"{{ node.Name }}\": { \"ansible_host\":\"{{ node.Networks.split(',')[-1].replace(' ','') }}\" }{% if not loop.last %},{% endif %}{% endfor %} }"
            masterinventory: "{ {% for node in masters %}\"{{ node.Name }}\": { \"ansible_host\":\"{{ node.Networks.split(',')[-1].replace(' ','') }}\" }{% if not loop.last %},{% endif %}{% endfor %} }"

        # TODO(evrardjp): Replace with stack outputs
        - name: List IDs
          set_fact:
            workerids: "{{ workers | json_query('[*].ID') }}"
            adminids: "{{ admins | json_query('[*].ID') }}"
            masterids: "{{ masters | json_query('[*].ID') }}"

        - name: Run the caasp tooling
          shell: |
            # compatibility for caasp tooling requires the creation of ssh key
            if [ ! -d ../misc-files/ ]; then
                mkdir ../misc-files
            fi
            if [ ! -f ../misc-files/id_shared ]; then
                ssh-keygen -b 2048 -t rsa -f ../misc-files/id_shared -N ""
            fi
            ./tools/generate-environment "$STACK_NAME"
            ./misc-tools/generate-ssh-config environment.json
            PYTHONUNBUFFERED=1 "./misc-tools/wait-for-velum" https://$(jq -r '.dashboardExternalHost' environment.json)
            cp environment.json {{ deploy_on_openstack_caasp_environmentfile }}
          args:
            chdir: "{{ playbook_dir }}/../files/"

        # TODO(evrardjp): Parse the heat output when the heat template has changed
        - name: Port security disable on ports
          shell: |
            ## Get ports from instances IDs
            serverports=$(openstack port list --server {{ item | quote }} -c ID -f value)
            for port in $serverports; do
                ## Disable port security on those pesky instances
                openstack port set ${port} --no-security-group --disable-port-security
            done
          loop: "{{ workerids + adminids + masterids }}"
          args:
            chdir: "{{ playbook_dir }}/../files/"

        - name: Create a VIP port for OSH
          os_port:
            cloud: "{{ deploy_on_openstack_cloudname }}"
            state: present
            name: "{{ _stack.stdout }}-vip"
            no_security_groups: True
            network: "{{ deploy_on_openstack_internal_network }}"

        - name: Display VIP ip
          shell: |
            portdetails=$(openstack port show ${STACK_NAME}-vip -c fixed_ips -f value | cut -f 1 -d ',')
            vip=$(eval ${portdetails} && echo $ip_address)
            echo $vip
          register: _vipip
          changed_when: false

        - name: Extend inventory in workspace with newly created caasp nodes
          config_template:
            src: "{{ socok8s_workspace }}/inventory/hosts.yml"
            dest: "{{ socok8s_workspace }}/inventory/hosts.yml"
            config_type: yaml
            config_overrides: "{{ caasp_overrides }}"
          vars:
            caasp_overrides:
              caasp-admin:
                hosts: {{ admininventory }}
              caasp-masters:
                hosts: {{ masterinventory }}
              caasp-workers:
                hosts: {{ wokerinventory }}

        - name: Add vip with cidr in extravars
          lineinfile:
            path: "{{ suse_osh_deploy_user_variables }}"
            regexp: "^suse_osh_deploy_vip_with_cidr.*"
            line: "suse_osh_deploy_vip_with_cidr: {{ _vipip.stdout }}/24"

        - meta: refresh_inventory

        # Waiting for port is not enough, as the port might be up (systemd)
        # while ssh is not ready. Wait for connection is not good either
        # because the key is unknown.
        - name: Wait for a while for SSH to be properly booted up
          wait_for:
            timeout: 120

        - name: Get pubkey, and add it to known hosts
          shell: ssh-keyscan -H {{ item }} >> ${HOME}/.ssh/known_hosts
          loop: "{{ groups['caasp-admin'] + groups['caasp-masters'] + groups['caasp-workers'] }}"
          args:
            executable: /bin/bash

    - name: Handle deletion
      when:
        - ((caasp_stack_delete | default('false'))| bool)
        - not _stack is changed
      block:
        - name: Delete stack
          os_stack:
            cloud: "{{ deploy_on_openstack_cloudname }}"
            name: "{{ lookup('file',deploy_on_openstack_caasp_stacknamefile) }}"
            state: absent

        - name: Remove host from known hosts
          shell: ssh-keygen -R {{ hostvars[item]['ansible_host'] | quote }}
          loop: "{{ groups['caasp-admin'] + groups['caasp-masters'] + groups['caasp-workers'] }}"
          args:
            executable: /bin/bash

        - name: Remove environment.json
          file:
            state: absent
            path: "{{ deploy_on_openstack_caasp_environmentfile }}"
